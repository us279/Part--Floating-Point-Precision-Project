import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os

save_folder = '/Users/uday03/Desktop/Part IIB Project/code/Part--Floating-Point-Precision-Project/Figs'
os.makedirs(save_folder, exist_ok=True)

# Parameters
Re = 100.0
Lx, Ly = 1.0, 1.0
grid_sizes = [(2**n, 2**n) for n in range(4, 7)]  # grid sizes from 16x16 to 64x64
T_final = 0.1
CFL = 0.5

# DataFrame to store errors and time
error_df = pd.DataFrame()

def testing_fp_precision(nx, ny, precision, fp_label):
    dx, dy = Lx / (nx - 1), Ly / (ny - 1)
    x = np.linspace(0, Lx, nx, dtype=precision)
    y = np.linspace(0, Ly, ny, dtype=precision)
    X, Y = np.meshgrid(x, y)

    # Calculate dt using the CFL condition
    distance = np.sqrt(X**2 + Y**2)
    max_distance = np.max(distance)
    dt = CFL * min(dx, dy) / max_distance

    def exact_solution(xg, yg, t):
        u = precision(3/4 - 1./(4 * (1 + np.exp((-4 * xg + 4 * yg - t) * Re / 32))))
        v = precision(3/4 + 1./(4 * (1 + np.exp((-4 * xg + 4 * yg - t) * Re / 32))))
        return u, v

    # Initialize arrays using the exact solution
    u_numerical, v_numerical = exact_solution(X, Y, 0)
    u_next = np.zeros_like(u_numerical)
    v_next = np.zeros_like(v_numerical)
    prev_dudt = np.zeros_like(u_numerical)
    prev_dvdt = np.zeros_like(v_numerical)

    from time import time
    t0 = time()
    for t in np.arange(0, T_final, dt):
        # Define u_exact and v_exact at the beginning of the loop
        u_exact, v_exact = exact_solution(X, Y, t)


        dudx, dudy = np.gradient(u_numerical, dx, dy)
        dvdx, dvdy = np.gradient(v_numerical, dx, dy)
        d2udx2, _ = np.gradient(dudx, dx)
        _, d2udy2 = np.gradient(dudy, dy)
        d2vdx2, _ = np.gradient(dvdx, dx)
        _, d2vdy2 = np.gradient(dvdy, dy)

        # Convert gradients to specified precision
        dudx, dudy = precision(dudx), precision(dudy)
        dvdx, dvdy = precision(dvdx), precision(dvdy)
        d2udx2, d2udy2 = precision(d2udx2), precision(d2udy2)
        d2vdx2, d2vdy2 = precision(d2vdx2), precision(d2vdy2)

        # Update derivatives
        dudt = precision(-(u_numerical * dudx + v_numerical * dudy) + (d2udx2 + d2udy2) / Re)
        dvdt = precision(-(u_numerical * dvdx + v_numerical * dvdy) + (d2vdx2 + d2vdy2) / Re)


        if t > 0:
            u_next = precision(u_numerical + dt * (1.5 * dudt - 0.5 * prev_dudt))
            v_next = precision(v_numerical + dt * (1.5 * dvdt - 0.5 * prev_dvdt))
        else:
            u_next = precision(u_numerical + dt * dudt)
            v_next = precision(v_numerical + dt * dvdt)

        # Apply boundary conditions
        u_next[0, :], u_next[-1, :], u_next[:, 0], u_next[:, -1] = u_exact[0, :], u_exact[-1, :], u_exact[:, 0], u_exact[:, -1]
        v_next[0, :], v_next[-1, :], v_next[:, 0], v_next[:, -1] = v_exact[0, :], v_exact[-1, :], v_exact[:, 0], v_exact[:, -1]

        # Swap arrays for the next step
        u_numerical, u_next = u_next, u_numerical
        v_numerical, v_next = v_next, v_numerical
        prev_dudt, prev_dvdt = dudt, dvdt

    # Capture the exact solution at final time step for error computation
    u_exact, v_exact = exact_solution(X, Y, T_final)
    time_taken = time() - t0
    errors = {
        'Grid Size': nx * ny,
        'Precision': fp_label,
        'Max Error U': np.max(np.abs(u_exact - u_numerical)),
        'Mean Error U': np.mean(np.abs(u_exact - u_numerical)),
        'RMSE U': np.sqrt(np.mean(np.abs(u_exact - u_numerical)**2)),
        'Max Error V': np.max(np.abs(v_exact - v_numerical)),
        'Mean Error V': np.mean(np.abs(v_exact - v_numerical)),
        'RMSE V': np.sqrt(np.mean(np.abs(v_exact - v_numerical)**2)),
        'Time Taken': time_taken
    }
    return errors

for nx, ny in grid_sizes:
    for precision, label in [(np.float16, '16'), (np.float32, '32'), (np.float64, '64')]:
        error_data = testing_fp_precision(nx, ny, precision, label)
        error_df = error_df.append(error_data, ignore_index=True)

# Create contour plots for U
file_name_u = input("Enter the file name to save the figure for U (e.g., 'figure_U.png'): ")
file_path_u = os.path.join(save_folder, file_name_u)
fig, axs = plt.subplots(1, 3, figsize=(18, 6))
titles = ['Mean Error U', 'Max Error U', 'RMSE U']
for ax, metric in zip(axs, titles):
    data_pivot = error_df.pivot('Precision', 'Grid Size', metric)
    CS = ax.contourf(data_pivot.columns, data_pivot.index, data_pivot.values, levels=20, cmap='viridis')
    fig.colorbar(CS, ax=ax)
    ax.set_title(metric)
    ax.set_xlabel('Grid Size')
    ax.set_ylabel('Precision')
fig.tight_layout()
plt.show()
fig.savefig(file_path_u)

# Create contour plots for V
file_name_v = input("Enter the file name to save the figure for V (e.g., 'figure_V.png'): ")
file_path_v = os.path.join(save_folder, file_name_v)
fig, axs = plt.subplots(1, 3, figsize=(18, 6))
titles = ['Mean Error V', 'Max Error V', 'RMSE V']
for ax, metric in zip(axs, titles):
    data_pivot = error_df.pivot('Precision', 'Grid Size', metric)
    CS = ax.contourf(data_pivot.columns, data_pivot.index, data_pivot.values, levels=20, cmap='viridis')
    fig.colorbar(CS, ax=ax)
    ax.set_title(metric)
    ax.set_xlabel('Grid Size')
    ax.set_ylabel('Precision')
fig.tight_layout()
plt.show()
fig.savefig(file_path_v)
